// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace auxilo {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Protocol {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_auxilo_HelloRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.HelloRequest, global::auxilo.HelloRequest.Builder> internal__static_auxilo_HelloRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.Message, global::auxilo.Message.Builder> internal__static_auxilo_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_DataMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.DataMessage, global::auxilo.DataMessage.Builder> internal__static_auxilo_DataMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_QueryMessageList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.QueryMessageList, global::auxilo.QueryMessageList.Builder> internal__static_auxilo_QueryMessageList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_QueryMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.QueryMessage, global::auxilo.QueryMessage.Builder> internal__static_auxilo_QueryMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_SensorDataList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.SensorDataList, global::auxilo.SensorDataList.Builder> internal__static_auxilo_SensorDataList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_DeviceList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceList, global::auxilo.DeviceList.Builder> internal__static_auxilo_DeviceList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_DeviceInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceInfo, global::auxilo.DeviceInfo.Builder> internal__static_auxilo_DeviceInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_DeviceCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceCommand, global::auxilo.DeviceCommand.Builder> internal__static_auxilo_DeviceCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_auxilo_DeviceStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceStatus, global::auxilo.DeviceStatus.Builder> internal__static_auxilo_DeviceStatus__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Protocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5Qcm90b2NvbC5wcm90bxIGYXV4aWxvIkUKDEhlbGxvUmVxdWVzdBISCgpj" + 
          "dXN0b21lcklEGAEgAigJEhIKCmRldmljZU5hbWUYAiACKAkSDQoFaXNCb3gY" + 
          "AyACKAgi8gEKB01lc3NhZ2USGgoScmVjZWl2ZXJEZXZpY2VOYW1lGAEgAigJ" + 
          "EhgKEHNlbmRlckRldmljZU5hbWUYAiACKAkSLgoOc2Vuc29yRGF0YUxpc3QY" + 
          "AyABKAsyFi5hdXhpbG8uU2Vuc29yRGF0YUxpc3QSJQoDcXJ5GAQgASgLMhgu" + 
          "YXV4aWxvLlF1ZXJ5TWVzc2FnZUxpc3QSLQoOZGV2aWNlX2NvbW1hbmQYBSAB" + 
          "KAsyFS5hdXhpbG8uRGV2aWNlQ29tbWFuZBIrCg1kZXZpY2Vfc3RhdHVzGAYg" + 
          "ASgLMhQuYXV4aWxvLkRldmljZVN0YXR1cyJCCgtEYXRhTWVzc2FnZRISCgpo" + 
          "YXJkd2FyZUlEGAEgAigJEgwKBGRhdGEYAiACKAISEQoJdGltZVN0YW1wGAMg" + 
          "AigJIjcKEFF1ZXJ5TWVzc2FnZUxpc3QSIwoFcXVlcnkYASADKAsyFC5hdXhp" + 
          "bG8uUXVlcnlNZXNzYWdlIjQKDFF1ZXJ5TWVzc2FnZRIQCghzZW5zb3JJRBgB" + 
          "IAIoCRISCgpsYXRlc3REYXRlGAIgASgJIjkKDlNlbnNvckRhdGFMaXN0EicK" + 
          "CnNlbnNvckRhdGEYASADKAsyEy5hdXhpbG8uRGF0YU1lc3NhZ2UiNAoKRGV2" + 
          "aWNlTGlzdBImCgpkZXZpY2VMaXN0GAEgAygLMhIuYXV4aWxvLkRldmljZUlu" + 
          "Zm8idwoKRGV2aWNlSW5mbxINCgVib3hJRBgBIAIoCRIQCghkZXZpY2VJRBgC" + 
          "IAIoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIRCglhbGlhc05hbWUYBCABKAkS" + 
          "IAoEdHlwZRgFIAIoDjISLmF1eGlsby5kZXZpY2VUeXBlIkkKDURldmljZUNv" + 
          "bW1hbmQSEAoIZGV2aWNlSUQYASACKAkSJgoJc2V0U3RhdHVzGAIgASgOMhMu" + 
          "YXV4aWxvLmRldmljZVN0YXRlIkUKDERldmljZVN0YXR1cxIQCghkZXZpY2VJ" + 
          "RBgBIAIoCRIjCgZzdGF0dXMYAiACKA4yEy5hdXhpbG8uZGV2aWNlU3RhdGUq" + 
          "OwoKZGV2aWNlVHlwZRIOCgpzZW5zb3JUZW1wEAESDgoKZGV2aWNlTmV4YRAC" + 
          "Eg0KCXNlbnNvclBJUhADKisKC2RldmljZVN0YXRlEgYKAm9uEAESBwoDb2Zm" + 
          "EAISCwoHdW5rbm93bhADQhwKCHByb3RvYnVmQhBQcm90b2J1Zk1lc3NhZ2Vz");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_auxilo_HelloRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_auxilo_HelloRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.HelloRequest, global::auxilo.HelloRequest.Builder>(internal__static_auxilo_HelloRequest__Descriptor,
                new string[] { "CustomerID", "DeviceName", "IsBox", });
        internal__static_auxilo_Message__Descriptor = Descriptor.MessageTypes[1];
        internal__static_auxilo_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.Message, global::auxilo.Message.Builder>(internal__static_auxilo_Message__Descriptor,
                new string[] { "ReceiverDeviceName", "SenderDeviceName", "SensorDataList", "Qry", "DeviceCommand", "DeviceStatus", });
        internal__static_auxilo_DataMessage__Descriptor = Descriptor.MessageTypes[2];
        internal__static_auxilo_DataMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.DataMessage, global::auxilo.DataMessage.Builder>(internal__static_auxilo_DataMessage__Descriptor,
                new string[] { "HardwareID", "Data", "TimeStamp", });
        internal__static_auxilo_QueryMessageList__Descriptor = Descriptor.MessageTypes[3];
        internal__static_auxilo_QueryMessageList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.QueryMessageList, global::auxilo.QueryMessageList.Builder>(internal__static_auxilo_QueryMessageList__Descriptor,
                new string[] { "Query", });
        internal__static_auxilo_QueryMessage__Descriptor = Descriptor.MessageTypes[4];
        internal__static_auxilo_QueryMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.QueryMessage, global::auxilo.QueryMessage.Builder>(internal__static_auxilo_QueryMessage__Descriptor,
                new string[] { "SensorID", "LatestDate", });
        internal__static_auxilo_SensorDataList__Descriptor = Descriptor.MessageTypes[5];
        internal__static_auxilo_SensorDataList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.SensorDataList, global::auxilo.SensorDataList.Builder>(internal__static_auxilo_SensorDataList__Descriptor,
                new string[] { "SensorData", });
        internal__static_auxilo_DeviceList__Descriptor = Descriptor.MessageTypes[6];
        internal__static_auxilo_DeviceList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceList, global::auxilo.DeviceList.Builder>(internal__static_auxilo_DeviceList__Descriptor,
                new string[] { "DeviceList_", });
        internal__static_auxilo_DeviceInfo__Descriptor = Descriptor.MessageTypes[7];
        internal__static_auxilo_DeviceInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceInfo, global::auxilo.DeviceInfo.Builder>(internal__static_auxilo_DeviceInfo__Descriptor,
                new string[] { "BoxID", "DeviceID", "Description", "AliasName", "Type", });
        internal__static_auxilo_DeviceCommand__Descriptor = Descriptor.MessageTypes[8];
        internal__static_auxilo_DeviceCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceCommand, global::auxilo.DeviceCommand.Builder>(internal__static_auxilo_DeviceCommand__Descriptor,
                new string[] { "DeviceID", "SetStatus", });
        internal__static_auxilo_DeviceStatus__Descriptor = Descriptor.MessageTypes[9];
        internal__static_auxilo_DeviceStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::auxilo.DeviceStatus, global::auxilo.DeviceStatus.Builder>(internal__static_auxilo_DeviceStatus__Descriptor,
                new string[] { "DeviceID", "Status", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum deviceType {
    sensorTemp = 1,
    deviceNexa = 2,
    sensorPIR = 3,
  }
  
  public enum deviceState {
    on = 1,
    off = 2,
    unknown = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HelloRequest : pb::GeneratedMessage<HelloRequest, HelloRequest.Builder> {
    private HelloRequest() { }
    private static readonly HelloRequest defaultInstance = new HelloRequest().MakeReadOnly();
    private static readonly string[] _helloRequestFieldNames = new string[] { "customerID", "deviceName", "isBox" };
    private static readonly uint[] _helloRequestFieldTags = new uint[] { 10, 18, 24 };
    public static HelloRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HelloRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HelloRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_HelloRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HelloRequest, HelloRequest.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_HelloRequest__FieldAccessorTable; }
    }
    
    public const int CustomerIDFieldNumber = 1;
    private bool hasCustomerID;
    private string customerID_ = "";
    public bool HasCustomerID {
      get { return hasCustomerID; }
    }
    public string CustomerID {
      get { return customerID_; }
    }
    
    public const int DeviceNameFieldNumber = 2;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public const int IsBoxFieldNumber = 3;
    private bool hasIsBox;
    private bool isBox_;
    public bool HasIsBox {
      get { return hasIsBox; }
    }
    public bool IsBox {
      get { return isBox_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCustomerID) return false;
        if (!hasDeviceName) return false;
        if (!hasIsBox) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _helloRequestFieldNames;
      if (hasCustomerID) {
        output.WriteString(1, field_names[0], CustomerID);
      }
      if (hasDeviceName) {
        output.WriteString(2, field_names[1], DeviceName);
      }
      if (hasIsBox) {
        output.WriteBool(3, field_names[2], IsBox);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCustomerID) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CustomerID);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, DeviceName);
        }
        if (hasIsBox) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsBox);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HelloRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HelloRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HelloRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HelloRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HelloRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HelloRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HelloRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HelloRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HelloRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HelloRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HelloRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HelloRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<HelloRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HelloRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HelloRequest result;
      
      private HelloRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          HelloRequest original = result;
          result = new HelloRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HelloRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.HelloRequest.Descriptor; }
      }
      
      public override HelloRequest DefaultInstanceForType {
        get { return global::auxilo.HelloRequest.DefaultInstance; }
      }
      
      public override HelloRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HelloRequest) {
          return MergeFrom((HelloRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HelloRequest other) {
        if (other == global::auxilo.HelloRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCustomerID) {
          CustomerID = other.CustomerID;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasIsBox) {
          IsBox = other.IsBox;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_helloRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _helloRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCustomerID = input.ReadString(ref result.customerID_);
              break;
            }
            case 18: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
            case 24: {
              result.hasIsBox = input.ReadBool(ref result.isBox_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCustomerID {
        get { return result.hasCustomerID; }
      }
      public string CustomerID {
        get { return result.CustomerID; }
        set { SetCustomerID(value); }
      }
      public Builder SetCustomerID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerID = true;
        result.customerID_ = value;
        return this;
      }
      public Builder ClearCustomerID() {
        PrepareBuilder();
        result.hasCustomerID = false;
        result.customerID_ = "";
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
      
      public bool HasIsBox {
        get { return result.hasIsBox; }
      }
      public bool IsBox {
        get { return result.IsBox; }
        set { SetIsBox(value); }
      }
      public Builder SetIsBox(bool value) {
        PrepareBuilder();
        result.hasIsBox = true;
        result.isBox_ = value;
        return this;
      }
      public Builder ClearIsBox() {
        PrepareBuilder();
        result.hasIsBox = false;
        result.isBox_ = false;
        return this;
      }
    }
    static HelloRequest() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "device_command", "device_status", "qry", "receiverDeviceName", "senderDeviceName", "sensorDataList" };
    private static readonly uint[] _messageFieldTags = new uint[] { 42, 50, 34, 10, 18, 26 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_Message__FieldAccessorTable; }
    }
    
    public const int ReceiverDeviceNameFieldNumber = 1;
    private bool hasReceiverDeviceName;
    private string receiverDeviceName_ = "";
    public bool HasReceiverDeviceName {
      get { return hasReceiverDeviceName; }
    }
    public string ReceiverDeviceName {
      get { return receiverDeviceName_; }
    }
    
    public const int SenderDeviceNameFieldNumber = 2;
    private bool hasSenderDeviceName;
    private string senderDeviceName_ = "";
    public bool HasSenderDeviceName {
      get { return hasSenderDeviceName; }
    }
    public string SenderDeviceName {
      get { return senderDeviceName_; }
    }
    
    public const int SensorDataListFieldNumber = 3;
    private bool hasSensorDataList;
    private global::auxilo.SensorDataList sensorDataList_;
    public bool HasSensorDataList {
      get { return hasSensorDataList; }
    }
    public global::auxilo.SensorDataList SensorDataList {
      get { return sensorDataList_ ?? global::auxilo.SensorDataList.DefaultInstance; }
    }
    
    public const int QryFieldNumber = 4;
    private bool hasQry;
    private global::auxilo.QueryMessageList qry_;
    public bool HasQry {
      get { return hasQry; }
    }
    public global::auxilo.QueryMessageList Qry {
      get { return qry_ ?? global::auxilo.QueryMessageList.DefaultInstance; }
    }
    
    public const int DeviceCommandFieldNumber = 5;
    private bool hasDeviceCommand;
    private global::auxilo.DeviceCommand deviceCommand_;
    public bool HasDeviceCommand {
      get { return hasDeviceCommand; }
    }
    public global::auxilo.DeviceCommand DeviceCommand {
      get { return deviceCommand_ ?? global::auxilo.DeviceCommand.DefaultInstance; }
    }
    
    public const int DeviceStatusFieldNumber = 6;
    private bool hasDeviceStatus;
    private global::auxilo.DeviceStatus deviceStatus_;
    public bool HasDeviceStatus {
      get { return hasDeviceStatus; }
    }
    public global::auxilo.DeviceStatus DeviceStatus {
      get { return deviceStatus_ ?? global::auxilo.DeviceStatus.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasReceiverDeviceName) return false;
        if (!hasSenderDeviceName) return false;
        if (HasSensorDataList) {
          if (!SensorDataList.IsInitialized) return false;
        }
        if (HasQry) {
          if (!Qry.IsInitialized) return false;
        }
        if (HasDeviceCommand) {
          if (!DeviceCommand.IsInitialized) return false;
        }
        if (HasDeviceStatus) {
          if (!DeviceStatus.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      if (hasReceiverDeviceName) {
        output.WriteString(1, field_names[3], ReceiverDeviceName);
      }
      if (hasSenderDeviceName) {
        output.WriteString(2, field_names[4], SenderDeviceName);
      }
      if (hasSensorDataList) {
        output.WriteMessage(3, field_names[5], SensorDataList);
      }
      if (hasQry) {
        output.WriteMessage(4, field_names[2], Qry);
      }
      if (hasDeviceCommand) {
        output.WriteMessage(5, field_names[0], DeviceCommand);
      }
      if (hasDeviceStatus) {
        output.WriteMessage(6, field_names[1], DeviceStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasReceiverDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ReceiverDeviceName);
        }
        if (hasSenderDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SenderDeviceName);
        }
        if (hasSensorDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, SensorDataList);
        }
        if (hasQry) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Qry);
        }
        if (hasDeviceCommand) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, DeviceCommand);
        }
        if (hasDeviceStatus) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, DeviceStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::auxilo.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::auxilo.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasReceiverDeviceName) {
          ReceiverDeviceName = other.ReceiverDeviceName;
        }
        if (other.HasSenderDeviceName) {
          SenderDeviceName = other.SenderDeviceName;
        }
        if (other.HasSensorDataList) {
          MergeSensorDataList(other.SensorDataList);
        }
        if (other.HasQry) {
          MergeQry(other.Qry);
        }
        if (other.HasDeviceCommand) {
          MergeDeviceCommand(other.DeviceCommand);
        }
        if (other.HasDeviceStatus) {
          MergeDeviceStatus(other.DeviceStatus);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasReceiverDeviceName = input.ReadString(ref result.receiverDeviceName_);
              break;
            }
            case 18: {
              result.hasSenderDeviceName = input.ReadString(ref result.senderDeviceName_);
              break;
            }
            case 26: {
              global::auxilo.SensorDataList.Builder subBuilder = global::auxilo.SensorDataList.CreateBuilder();
              if (result.hasSensorDataList) {
                subBuilder.MergeFrom(SensorDataList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SensorDataList = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::auxilo.QueryMessageList.Builder subBuilder = global::auxilo.QueryMessageList.CreateBuilder();
              if (result.hasQry) {
                subBuilder.MergeFrom(Qry);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Qry = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::auxilo.DeviceCommand.Builder subBuilder = global::auxilo.DeviceCommand.CreateBuilder();
              if (result.hasDeviceCommand) {
                subBuilder.MergeFrom(DeviceCommand);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeviceCommand = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::auxilo.DeviceStatus.Builder subBuilder = global::auxilo.DeviceStatus.CreateBuilder();
              if (result.hasDeviceStatus) {
                subBuilder.MergeFrom(DeviceStatus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeviceStatus = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasReceiverDeviceName {
        get { return result.hasReceiverDeviceName; }
      }
      public string ReceiverDeviceName {
        get { return result.ReceiverDeviceName; }
        set { SetReceiverDeviceName(value); }
      }
      public Builder SetReceiverDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReceiverDeviceName = true;
        result.receiverDeviceName_ = value;
        return this;
      }
      public Builder ClearReceiverDeviceName() {
        PrepareBuilder();
        result.hasReceiverDeviceName = false;
        result.receiverDeviceName_ = "";
        return this;
      }
      
      public bool HasSenderDeviceName {
        get { return result.hasSenderDeviceName; }
      }
      public string SenderDeviceName {
        get { return result.SenderDeviceName; }
        set { SetSenderDeviceName(value); }
      }
      public Builder SetSenderDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSenderDeviceName = true;
        result.senderDeviceName_ = value;
        return this;
      }
      public Builder ClearSenderDeviceName() {
        PrepareBuilder();
        result.hasSenderDeviceName = false;
        result.senderDeviceName_ = "";
        return this;
      }
      
      public bool HasSensorDataList {
       get { return result.hasSensorDataList; }
      }
      public global::auxilo.SensorDataList SensorDataList {
        get { return result.SensorDataList; }
        set { SetSensorDataList(value); }
      }
      public Builder SetSensorDataList(global::auxilo.SensorDataList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSensorDataList = true;
        result.sensorDataList_ = value;
        return this;
      }
      public Builder SetSensorDataList(global::auxilo.SensorDataList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSensorDataList = true;
        result.sensorDataList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSensorDataList(global::auxilo.SensorDataList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSensorDataList &&
            result.sensorDataList_ != global::auxilo.SensorDataList.DefaultInstance) {
            result.sensorDataList_ = global::auxilo.SensorDataList.CreateBuilder(result.sensorDataList_).MergeFrom(value).BuildPartial();
        } else {
          result.sensorDataList_ = value;
        }
        result.hasSensorDataList = true;
        return this;
      }
      public Builder ClearSensorDataList() {
        PrepareBuilder();
        result.hasSensorDataList = false;
        result.sensorDataList_ = null;
        return this;
      }
      
      public bool HasQry {
       get { return result.hasQry; }
      }
      public global::auxilo.QueryMessageList Qry {
        get { return result.Qry; }
        set { SetQry(value); }
      }
      public Builder SetQry(global::auxilo.QueryMessageList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQry = true;
        result.qry_ = value;
        return this;
      }
      public Builder SetQry(global::auxilo.QueryMessageList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQry = true;
        result.qry_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQry(global::auxilo.QueryMessageList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQry &&
            result.qry_ != global::auxilo.QueryMessageList.DefaultInstance) {
            result.qry_ = global::auxilo.QueryMessageList.CreateBuilder(result.qry_).MergeFrom(value).BuildPartial();
        } else {
          result.qry_ = value;
        }
        result.hasQry = true;
        return this;
      }
      public Builder ClearQry() {
        PrepareBuilder();
        result.hasQry = false;
        result.qry_ = null;
        return this;
      }
      
      public bool HasDeviceCommand {
       get { return result.hasDeviceCommand; }
      }
      public global::auxilo.DeviceCommand DeviceCommand {
        get { return result.DeviceCommand; }
        set { SetDeviceCommand(value); }
      }
      public Builder SetDeviceCommand(global::auxilo.DeviceCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceCommand = true;
        result.deviceCommand_ = value;
        return this;
      }
      public Builder SetDeviceCommand(global::auxilo.DeviceCommand.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeviceCommand = true;
        result.deviceCommand_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeviceCommand(global::auxilo.DeviceCommand value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeviceCommand &&
            result.deviceCommand_ != global::auxilo.DeviceCommand.DefaultInstance) {
            result.deviceCommand_ = global::auxilo.DeviceCommand.CreateBuilder(result.deviceCommand_).MergeFrom(value).BuildPartial();
        } else {
          result.deviceCommand_ = value;
        }
        result.hasDeviceCommand = true;
        return this;
      }
      public Builder ClearDeviceCommand() {
        PrepareBuilder();
        result.hasDeviceCommand = false;
        result.deviceCommand_ = null;
        return this;
      }
      
      public bool HasDeviceStatus {
       get { return result.hasDeviceStatus; }
      }
      public global::auxilo.DeviceStatus DeviceStatus {
        get { return result.DeviceStatus; }
        set { SetDeviceStatus(value); }
      }
      public Builder SetDeviceStatus(global::auxilo.DeviceStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceStatus = true;
        result.deviceStatus_ = value;
        return this;
      }
      public Builder SetDeviceStatus(global::auxilo.DeviceStatus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeviceStatus = true;
        result.deviceStatus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeviceStatus(global::auxilo.DeviceStatus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeviceStatus &&
            result.deviceStatus_ != global::auxilo.DeviceStatus.DefaultInstance) {
            result.deviceStatus_ = global::auxilo.DeviceStatus.CreateBuilder(result.deviceStatus_).MergeFrom(value).BuildPartial();
        } else {
          result.deviceStatus_ = value;
        }
        result.hasDeviceStatus = true;
        return this;
      }
      public Builder ClearDeviceStatus() {
        PrepareBuilder();
        result.hasDeviceStatus = false;
        result.deviceStatus_ = null;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataMessage : pb::GeneratedMessage<DataMessage, DataMessage.Builder> {
    private DataMessage() { }
    private static readonly DataMessage defaultInstance = new DataMessage().MakeReadOnly();
    private static readonly string[] _dataMessageFieldNames = new string[] { "data", "hardwareID", "timeStamp" };
    private static readonly uint[] _dataMessageFieldTags = new uint[] { 21, 10, 26 };
    public static DataMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_DataMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataMessage, DataMessage.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_DataMessage__FieldAccessorTable; }
    }
    
    public const int HardwareIDFieldNumber = 1;
    private bool hasHardwareID;
    private string hardwareID_ = "";
    public bool HasHardwareID {
      get { return hasHardwareID; }
    }
    public string HardwareID {
      get { return hardwareID_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private float data_;
    public bool HasData {
      get { return hasData; }
    }
    public float Data {
      get { return data_; }
    }
    
    public const int TimeStampFieldNumber = 3;
    private bool hasTimeStamp;
    private string timeStamp_ = "";
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public string TimeStamp {
      get { return timeStamp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHardwareID) return false;
        if (!hasData) return false;
        if (!hasTimeStamp) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataMessageFieldNames;
      if (hasHardwareID) {
        output.WriteString(1, field_names[1], HardwareID);
      }
      if (hasData) {
        output.WriteFloat(2, field_names[0], Data);
      }
      if (hasTimeStamp) {
        output.WriteString(3, field_names[2], TimeStamp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHardwareID) {
          size += pb::CodedOutputStream.ComputeStringSize(1, HardwareID);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Data);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeStringSize(3, TimeStamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataMessage result;
      
      private DataMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          DataMessage original = result;
          result = new DataMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.DataMessage.Descriptor; }
      }
      
      public override DataMessage DefaultInstanceForType {
        get { return global::auxilo.DataMessage.DefaultInstance; }
      }
      
      public override DataMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataMessage) {
          return MergeFrom((DataMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataMessage other) {
        if (other == global::auxilo.DataMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHardwareID) {
          HardwareID = other.HardwareID;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasHardwareID = input.ReadString(ref result.hardwareID_);
              break;
            }
            case 21: {
              result.hasData = input.ReadFloat(ref result.data_);
              break;
            }
            case 26: {
              result.hasTimeStamp = input.ReadString(ref result.timeStamp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHardwareID {
        get { return result.hasHardwareID; }
      }
      public string HardwareID {
        get { return result.HardwareID; }
        set { SetHardwareID(value); }
      }
      public Builder SetHardwareID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHardwareID = true;
        result.hardwareID_ = value;
        return this;
      }
      public Builder ClearHardwareID() {
        PrepareBuilder();
        result.hasHardwareID = false;
        result.hardwareID_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public float Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(float value) {
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = 0F;
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public string TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = "";
        return this;
      }
    }
    static DataMessage() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryMessageList : pb::GeneratedMessage<QueryMessageList, QueryMessageList.Builder> {
    private QueryMessageList() { }
    private static readonly QueryMessageList defaultInstance = new QueryMessageList().MakeReadOnly();
    private static readonly string[] _queryMessageListFieldNames = new string[] { "query" };
    private static readonly uint[] _queryMessageListFieldTags = new uint[] { 10 };
    public static QueryMessageList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryMessageList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryMessageList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_QueryMessageList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryMessageList, QueryMessageList.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_QueryMessageList__FieldAccessorTable; }
    }
    
    public const int QueryFieldNumber = 1;
    private pbc::PopsicleList<global::auxilo.QueryMessage> query_ = new pbc::PopsicleList<global::auxilo.QueryMessage>();
    public scg::IList<global::auxilo.QueryMessage> QueryList {
      get { return query_; }
    }
    public int QueryCount {
      get { return query_.Count; }
    }
    public global::auxilo.QueryMessage GetQuery(int index) {
      return query_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::auxilo.QueryMessage element in QueryList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryMessageListFieldNames;
      if (query_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], query_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::auxilo.QueryMessage element in QueryList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryMessageList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryMessageList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryMessageList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryMessageList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryMessageList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryMessageList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryMessageList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryMessageList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryMessageList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryMessageList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryMessageList MakeReadOnly() {
      query_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryMessageList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryMessageList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryMessageList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryMessageList result;
      
      private QueryMessageList PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryMessageList original = result;
          result = new QueryMessageList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryMessageList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.QueryMessageList.Descriptor; }
      }
      
      public override QueryMessageList DefaultInstanceForType {
        get { return global::auxilo.QueryMessageList.DefaultInstance; }
      }
      
      public override QueryMessageList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryMessageList) {
          return MergeFrom((QueryMessageList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryMessageList other) {
        if (other == global::auxilo.QueryMessageList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.query_.Count != 0) {
          result.query_.Add(other.query_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryMessageListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryMessageListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.query_, global::auxilo.QueryMessage.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::auxilo.QueryMessage> QueryList {
        get { return PrepareBuilder().query_; }
      }
      public int QueryCount {
        get { return result.QueryCount; }
      }
      public global::auxilo.QueryMessage GetQuery(int index) {
        return result.GetQuery(index);
      }
      public Builder SetQuery(int index, global::auxilo.QueryMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.query_[index] = value;
        return this;
      }
      public Builder SetQuery(int index, global::auxilo.QueryMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.query_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuery(global::auxilo.QueryMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.query_.Add(value);
        return this;
      }
      public Builder AddQuery(global::auxilo.QueryMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.query_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuery(scg::IEnumerable<global::auxilo.QueryMessage> values) {
        PrepareBuilder();
        result.query_.Add(values);
        return this;
      }
      public Builder ClearQuery() {
        PrepareBuilder();
        result.query_.Clear();
        return this;
      }
    }
    static QueryMessageList() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QueryMessage : pb::GeneratedMessage<QueryMessage, QueryMessage.Builder> {
    private QueryMessage() { }
    private static readonly QueryMessage defaultInstance = new QueryMessage().MakeReadOnly();
    private static readonly string[] _queryMessageFieldNames = new string[] { "latestDate", "sensorID" };
    private static readonly uint[] _queryMessageFieldTags = new uint[] { 18, 10 };
    public static QueryMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override QueryMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override QueryMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_QueryMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<QueryMessage, QueryMessage.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_QueryMessage__FieldAccessorTable; }
    }
    
    public const int SensorIDFieldNumber = 1;
    private bool hasSensorID;
    private string sensorID_ = "";
    public bool HasSensorID {
      get { return hasSensorID; }
    }
    public string SensorID {
      get { return sensorID_; }
    }
    
    public const int LatestDateFieldNumber = 2;
    private bool hasLatestDate;
    private string latestDate_ = "";
    public bool HasLatestDate {
      get { return hasLatestDate; }
    }
    public string LatestDate {
      get { return latestDate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSensorID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _queryMessageFieldNames;
      if (hasSensorID) {
        output.WriteString(1, field_names[1], SensorID);
      }
      if (hasLatestDate) {
        output.WriteString(2, field_names[0], LatestDate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSensorID) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SensorID);
        }
        if (hasLatestDate) {
          size += pb::CodedOutputStream.ComputeStringSize(2, LatestDate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static QueryMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static QueryMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static QueryMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static QueryMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static QueryMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static QueryMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static QueryMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private QueryMessage MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(QueryMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<QueryMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(QueryMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private QueryMessage result;
      
      private QueryMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          QueryMessage original = result;
          result = new QueryMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override QueryMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.QueryMessage.Descriptor; }
      }
      
      public override QueryMessage DefaultInstanceForType {
        get { return global::auxilo.QueryMessage.DefaultInstance; }
      }
      
      public override QueryMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is QueryMessage) {
          return MergeFrom((QueryMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(QueryMessage other) {
        if (other == global::auxilo.QueryMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSensorID) {
          SensorID = other.SensorID;
        }
        if (other.HasLatestDate) {
          LatestDate = other.LatestDate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_queryMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _queryMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSensorID = input.ReadString(ref result.sensorID_);
              break;
            }
            case 18: {
              result.hasLatestDate = input.ReadString(ref result.latestDate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSensorID {
        get { return result.hasSensorID; }
      }
      public string SensorID {
        get { return result.SensorID; }
        set { SetSensorID(value); }
      }
      public Builder SetSensorID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSensorID = true;
        result.sensorID_ = value;
        return this;
      }
      public Builder ClearSensorID() {
        PrepareBuilder();
        result.hasSensorID = false;
        result.sensorID_ = "";
        return this;
      }
      
      public bool HasLatestDate {
        get { return result.hasLatestDate; }
      }
      public string LatestDate {
        get { return result.LatestDate; }
        set { SetLatestDate(value); }
      }
      public Builder SetLatestDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLatestDate = true;
        result.latestDate_ = value;
        return this;
      }
      public Builder ClearLatestDate() {
        PrepareBuilder();
        result.hasLatestDate = false;
        result.latestDate_ = "";
        return this;
      }
    }
    static QueryMessage() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SensorDataList : pb::GeneratedMessage<SensorDataList, SensorDataList.Builder> {
    private SensorDataList() { }
    private static readonly SensorDataList defaultInstance = new SensorDataList().MakeReadOnly();
    private static readonly string[] _sensorDataListFieldNames = new string[] { "sensorData" };
    private static readonly uint[] _sensorDataListFieldTags = new uint[] { 10 };
    public static SensorDataList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SensorDataList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SensorDataList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_SensorDataList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SensorDataList, SensorDataList.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_SensorDataList__FieldAccessorTable; }
    }
    
    public const int SensorDataFieldNumber = 1;
    private pbc::PopsicleList<global::auxilo.DataMessage> sensorData_ = new pbc::PopsicleList<global::auxilo.DataMessage>();
    public scg::IList<global::auxilo.DataMessage> SensorDataList {
      get { return sensorData_; }
    }
    public int SensorDataCount {
      get { return sensorData_.Count; }
    }
    public global::auxilo.DataMessage GetSensorData(int index) {
      return sensorData_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::auxilo.DataMessage element in SensorDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sensorDataListFieldNames;
      if (sensorData_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], sensorData_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::auxilo.DataMessage element in SensorDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SensorDataList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SensorDataList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SensorDataList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SensorDataList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SensorDataList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SensorDataList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SensorDataList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SensorDataList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SensorDataList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SensorDataList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SensorDataList MakeReadOnly() {
      sensorData_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SensorDataList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SensorDataList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SensorDataList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SensorDataList result;
      
      private SensorDataList PrepareBuilder() {
        if (resultIsReadOnly) {
          SensorDataList original = result;
          result = new SensorDataList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SensorDataList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.SensorDataList.Descriptor; }
      }
      
      public override SensorDataList DefaultInstanceForType {
        get { return global::auxilo.SensorDataList.DefaultInstance; }
      }
      
      public override SensorDataList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SensorDataList) {
          return MergeFrom((SensorDataList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SensorDataList other) {
        if (other == global::auxilo.SensorDataList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.sensorData_.Count != 0) {
          result.sensorData_.Add(other.sensorData_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sensorDataListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sensorDataListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.sensorData_, global::auxilo.DataMessage.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::auxilo.DataMessage> SensorDataList {
        get { return PrepareBuilder().sensorData_; }
      }
      public int SensorDataCount {
        get { return result.SensorDataCount; }
      }
      public global::auxilo.DataMessage GetSensorData(int index) {
        return result.GetSensorData(index);
      }
      public Builder SetSensorData(int index, global::auxilo.DataMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sensorData_[index] = value;
        return this;
      }
      public Builder SetSensorData(int index, global::auxilo.DataMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sensorData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSensorData(global::auxilo.DataMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sensorData_.Add(value);
        return this;
      }
      public Builder AddSensorData(global::auxilo.DataMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.sensorData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSensorData(scg::IEnumerable<global::auxilo.DataMessage> values) {
        PrepareBuilder();
        result.sensorData_.Add(values);
        return this;
      }
      public Builder ClearSensorData() {
        PrepareBuilder();
        result.sensorData_.Clear();
        return this;
      }
    }
    static SensorDataList() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceList : pb::GeneratedMessage<DeviceList, DeviceList.Builder> {
    private DeviceList() { }
    private static readonly DeviceList defaultInstance = new DeviceList().MakeReadOnly();
    private static readonly string[] _deviceListFieldNames = new string[] { "deviceList" };
    private static readonly uint[] _deviceListFieldTags = new uint[] { 10 };
    public static DeviceList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceList, DeviceList.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceList__FieldAccessorTable; }
    }
    
    public const int DeviceList_FieldNumber = 1;
    private pbc::PopsicleList<global::auxilo.DeviceInfo> deviceList_ = new pbc::PopsicleList<global::auxilo.DeviceInfo>();
    public scg::IList<global::auxilo.DeviceInfo> DeviceList_List {
      get { return deviceList_; }
    }
    public int DeviceList_Count {
      get { return deviceList_.Count; }
    }
    public global::auxilo.DeviceInfo GetDeviceList_(int index) {
      return deviceList_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::auxilo.DeviceInfo element in DeviceListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceListFieldNames;
      if (deviceList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], deviceList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::auxilo.DeviceInfo element in DeviceList_List) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceList MakeReadOnly() {
      deviceList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceList result;
      
      private DeviceList PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceList original = result;
          result = new DeviceList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.DeviceList.Descriptor; }
      }
      
      public override DeviceList DefaultInstanceForType {
        get { return global::auxilo.DeviceList.DefaultInstance; }
      }
      
      public override DeviceList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceList) {
          return MergeFrom((DeviceList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceList other) {
        if (other == global::auxilo.DeviceList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.deviceList_.Count != 0) {
          result.deviceList_.Add(other.deviceList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.deviceList_, global::auxilo.DeviceInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::auxilo.DeviceInfo> DeviceList_List {
        get { return PrepareBuilder().deviceList_; }
      }
      public int DeviceList_Count {
        get { return result.DeviceList_Count; }
      }
      public global::auxilo.DeviceInfo GetDeviceList_(int index) {
        return result.GetDeviceList_(index);
      }
      public Builder SetDeviceList_(int index, global::auxilo.DeviceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.deviceList_[index] = value;
        return this;
      }
      public Builder SetDeviceList_(int index, global::auxilo.DeviceInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.deviceList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDeviceList_(global::auxilo.DeviceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.deviceList_.Add(value);
        return this;
      }
      public Builder AddDeviceList_(global::auxilo.DeviceInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.deviceList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDeviceList_(scg::IEnumerable<global::auxilo.DeviceInfo> values) {
        PrepareBuilder();
        result.deviceList_.Add(values);
        return this;
      }
      public Builder ClearDeviceList_() {
        PrepareBuilder();
        result.deviceList_.Clear();
        return this;
      }
    }
    static DeviceList() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceInfo : pb::GeneratedMessage<DeviceInfo, DeviceInfo.Builder> {
    private DeviceInfo() { }
    private static readonly DeviceInfo defaultInstance = new DeviceInfo().MakeReadOnly();
    private static readonly string[] _deviceInfoFieldNames = new string[] { "aliasName", "boxID", "description", "deviceID", "type" };
    private static readonly uint[] _deviceInfoFieldTags = new uint[] { 34, 10, 26, 18, 40 };
    public static DeviceInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceInfo, DeviceInfo.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceInfo__FieldAccessorTable; }
    }
    
    public const int BoxIDFieldNumber = 1;
    private bool hasBoxID;
    private string boxID_ = "";
    public bool HasBoxID {
      get { return hasBoxID; }
    }
    public string BoxID {
      get { return boxID_; }
    }
    
    public const int DeviceIDFieldNumber = 2;
    private bool hasDeviceID;
    private string deviceID_ = "";
    public bool HasDeviceID {
      get { return hasDeviceID; }
    }
    public string DeviceID {
      get { return deviceID_; }
    }
    
    public const int DescriptionFieldNumber = 3;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int AliasNameFieldNumber = 4;
    private bool hasAliasName;
    private string aliasName_ = "";
    public bool HasAliasName {
      get { return hasAliasName; }
    }
    public string AliasName {
      get { return aliasName_; }
    }
    
    public const int TypeFieldNumber = 5;
    private bool hasType;
    private global::auxilo.deviceType type_ = global::auxilo.deviceType.sensorTemp;
    public bool HasType {
      get { return hasType; }
    }
    public global::auxilo.deviceType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBoxID) return false;
        if (!hasDeviceID) return false;
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceInfoFieldNames;
      if (hasBoxID) {
        output.WriteString(1, field_names[1], BoxID);
      }
      if (hasDeviceID) {
        output.WriteString(2, field_names[3], DeviceID);
      }
      if (hasDescription) {
        output.WriteString(3, field_names[2], Description);
      }
      if (hasAliasName) {
        output.WriteString(4, field_names[0], AliasName);
      }
      if (hasType) {
        output.WriteEnum(5, field_names[4], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBoxID) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BoxID);
        }
        if (hasDeviceID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, DeviceID);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Description);
        }
        if (hasAliasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, AliasName);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceInfo result;
      
      private DeviceInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceInfo original = result;
          result = new DeviceInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.DeviceInfo.Descriptor; }
      }
      
      public override DeviceInfo DefaultInstanceForType {
        get { return global::auxilo.DeviceInfo.DefaultInstance; }
      }
      
      public override DeviceInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceInfo) {
          return MergeFrom((DeviceInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceInfo other) {
        if (other == global::auxilo.DeviceInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBoxID) {
          BoxID = other.BoxID;
        }
        if (other.HasDeviceID) {
          DeviceID = other.DeviceID;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasAliasName) {
          AliasName = other.AliasName;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBoxID = input.ReadString(ref result.boxID_);
              break;
            }
            case 18: {
              result.hasDeviceID = input.ReadString(ref result.deviceID_);
              break;
            }
            case 26: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 34: {
              result.hasAliasName = input.ReadString(ref result.aliasName_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBoxID {
        get { return result.hasBoxID; }
      }
      public string BoxID {
        get { return result.BoxID; }
        set { SetBoxID(value); }
      }
      public Builder SetBoxID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBoxID = true;
        result.boxID_ = value;
        return this;
      }
      public Builder ClearBoxID() {
        PrepareBuilder();
        result.hasBoxID = false;
        result.boxID_ = "";
        return this;
      }
      
      public bool HasDeviceID {
        get { return result.hasDeviceID; }
      }
      public string DeviceID {
        get { return result.DeviceID; }
        set { SetDeviceID(value); }
      }
      public Builder SetDeviceID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceID = true;
        result.deviceID_ = value;
        return this;
      }
      public Builder ClearDeviceID() {
        PrepareBuilder();
        result.hasDeviceID = false;
        result.deviceID_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasAliasName {
        get { return result.hasAliasName; }
      }
      public string AliasName {
        get { return result.AliasName; }
        set { SetAliasName(value); }
      }
      public Builder SetAliasName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAliasName = true;
        result.aliasName_ = value;
        return this;
      }
      public Builder ClearAliasName() {
        PrepareBuilder();
        result.hasAliasName = false;
        result.aliasName_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::auxilo.deviceType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::auxilo.deviceType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::auxilo.deviceType.sensorTemp;
        return this;
      }
    }
    static DeviceInfo() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceCommand : pb::GeneratedMessage<DeviceCommand, DeviceCommand.Builder> {
    private DeviceCommand() { }
    private static readonly DeviceCommand defaultInstance = new DeviceCommand().MakeReadOnly();
    private static readonly string[] _deviceCommandFieldNames = new string[] { "deviceID", "setStatus" };
    private static readonly uint[] _deviceCommandFieldTags = new uint[] { 10, 16 };
    public static DeviceCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceCommand, DeviceCommand.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceCommand__FieldAccessorTable; }
    }
    
    public const int DeviceIDFieldNumber = 1;
    private bool hasDeviceID;
    private string deviceID_ = "";
    public bool HasDeviceID {
      get { return hasDeviceID; }
    }
    public string DeviceID {
      get { return deviceID_; }
    }
    
    public const int SetStatusFieldNumber = 2;
    private bool hasSetStatus;
    private global::auxilo.deviceState setStatus_ = global::auxilo.deviceState.on;
    public bool HasSetStatus {
      get { return hasSetStatus; }
    }
    public global::auxilo.deviceState SetStatus {
      get { return setStatus_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceID) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceCommandFieldNames;
      if (hasDeviceID) {
        output.WriteString(1, field_names[0], DeviceID);
      }
      if (hasSetStatus) {
        output.WriteEnum(2, field_names[1], (int) SetStatus, SetStatus);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceID) {
          size += pb::CodedOutputStream.ComputeStringSize(1, DeviceID);
        }
        if (hasSetStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) SetStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceCommand result;
      
      private DeviceCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceCommand original = result;
          result = new DeviceCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.DeviceCommand.Descriptor; }
      }
      
      public override DeviceCommand DefaultInstanceForType {
        get { return global::auxilo.DeviceCommand.DefaultInstance; }
      }
      
      public override DeviceCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceCommand) {
          return MergeFrom((DeviceCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceCommand other) {
        if (other == global::auxilo.DeviceCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceID) {
          DeviceID = other.DeviceID;
        }
        if (other.HasSetStatus) {
          SetStatus = other.SetStatus;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDeviceID = input.ReadString(ref result.deviceID_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.setStatus_, out unknown)) {
                result.hasSetStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceID {
        get { return result.hasDeviceID; }
      }
      public string DeviceID {
        get { return result.DeviceID; }
        set { SetDeviceID(value); }
      }
      public Builder SetDeviceID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceID = true;
        result.deviceID_ = value;
        return this;
      }
      public Builder ClearDeviceID() {
        PrepareBuilder();
        result.hasDeviceID = false;
        result.deviceID_ = "";
        return this;
      }
      
      public bool HasSetStatus {
       get { return result.hasSetStatus; }
      }
      public global::auxilo.deviceState SetStatus {
        get { return result.SetStatus; }
        set { SetSetStatus(value); }
      }
      public Builder SetSetStatus(global::auxilo.deviceState value) {
        PrepareBuilder();
        result.hasSetStatus = true;
        result.setStatus_ = value;
        return this;
      }
      public Builder ClearSetStatus() {
        PrepareBuilder();
        result.hasSetStatus = false;
        result.setStatus_ = global::auxilo.deviceState.on;
        return this;
      }
    }
    static DeviceCommand() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeviceStatus : pb::GeneratedMessage<DeviceStatus, DeviceStatus.Builder> {
    private DeviceStatus() { }
    private static readonly DeviceStatus defaultInstance = new DeviceStatus().MakeReadOnly();
    private static readonly string[] _deviceStatusFieldNames = new string[] { "deviceID", "status" };
    private static readonly uint[] _deviceStatusFieldTags = new uint[] { 10, 16 };
    public static DeviceStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DeviceStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DeviceStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DeviceStatus, DeviceStatus.Builder> InternalFieldAccessors {
      get { return global::auxilo.Protocol.internal__static_auxilo_DeviceStatus__FieldAccessorTable; }
    }
    
    public const int DeviceIDFieldNumber = 1;
    private bool hasDeviceID;
    private string deviceID_ = "";
    public bool HasDeviceID {
      get { return hasDeviceID; }
    }
    public string DeviceID {
      get { return deviceID_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::auxilo.deviceState status_ = global::auxilo.deviceState.on;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::auxilo.deviceState Status {
      get { return status_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDeviceID) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _deviceStatusFieldNames;
      if (hasDeviceID) {
        output.WriteString(1, field_names[0], DeviceID);
      }
      if (hasStatus) {
        output.WriteEnum(2, field_names[1], (int) Status, Status);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDeviceID) {
          size += pb::CodedOutputStream.ComputeStringSize(1, DeviceID);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DeviceStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DeviceStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DeviceStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DeviceStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DeviceStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DeviceStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DeviceStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DeviceStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DeviceStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DeviceStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DeviceStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DeviceStatus result;
      
      private DeviceStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          DeviceStatus original = result;
          result = new DeviceStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DeviceStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::auxilo.DeviceStatus.Descriptor; }
      }
      
      public override DeviceStatus DefaultInstanceForType {
        get { return global::auxilo.DeviceStatus.DefaultInstance; }
      }
      
      public override DeviceStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DeviceStatus) {
          return MergeFrom((DeviceStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DeviceStatus other) {
        if (other == global::auxilo.DeviceStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDeviceID) {
          DeviceID = other.DeviceID;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_deviceStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _deviceStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasDeviceID = input.ReadString(ref result.deviceID_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDeviceID {
        get { return result.hasDeviceID; }
      }
      public string DeviceID {
        get { return result.DeviceID; }
        set { SetDeviceID(value); }
      }
      public Builder SetDeviceID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceID = true;
        result.deviceID_ = value;
        return this;
      }
      public Builder ClearDeviceID() {
        PrepareBuilder();
        result.hasDeviceID = false;
        result.deviceID_ = "";
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::auxilo.deviceState Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::auxilo.deviceState value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::auxilo.deviceState.on;
        return this;
      }
    }
    static DeviceStatus() {
      object.ReferenceEquals(global::auxilo.Protocol.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
